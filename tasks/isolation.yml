---
- name: Setting file paths
  ansible.builtin.set_fact:
    show_interfaces_terse_file_path: "{{ tmp_root_dir }}/{{ show_interface_terse_output_file }}"
    show_ospf_interfaces_file_path: "{{ tmp_root_dir }}/{{ show_ospf_interface_output_file }}"
    interfaces_to_change_file_path: "{{ tmp_root_dir }}/{{ interfaces_to_change_file }}"
    inventory_hostname_dir_path: "{{ tmp_root_dir }}/{{ git_repo_name }}/{{ vendor_dir }}/{{ inventory_hostname }}/traffic-diversion"
  delegate_to: localhost

# ====> 1. bgp local preference


# ====> 2. ospf overload


# ====> 3. vrrp


# ====> 4. shut down southbound interfaces

# 4.1 : Collect all the present interfaces and write them to a file
- name: Collect current interfaces
  junipernetworks.junos.junos_command: 
    commands: show interfaces terse
  register: show_interfaces_terse

# Debug the output
# - name: Debug show interfaces terse
#   ansible.builtin.debug:
#     var: show_interfaces_terse

# regex_replace('\r\n', '\n'): Ensures that the output is formatted properly with new lines,
# in case the original output contains carriage return and line feed (\r\n).
- name: Ensure the output is properly formatted
  ansible.builtin.set_fact:
    formatted_output: "{{ show_interfaces_terse.stdout[0] | regex_replace('\r\n', '\n') }}"
  delegate_to: localhost
  ignore_errors: true
  when: show_interfaces_terse["failed"] == false

- name: Save the output to the show_interfaces_terse_file_path
  ansible.builtin.copy:
    content: "{{ formatted_output }}"
    dest: "{{ show_interfaces_terse_file_path }}"
  delegate_to: localhost
  ignore_errors: true
  when: show_interfaces_terse["failed"] == false


# 4.2 : Collect the interfaces participating in ospf and write them to a file
- name: Collect ospf interfaces
  junipernetworks.junos.junos_command: 
    commands: show ospf interface
  register: show_ospf_interface

# Debug the output
# - name: Debug show ospf interfaces
#   ansible.builtin.debug:
#     var: show_ospf_interfaces             

- name: Ensure the output is properly formatted
  ansible.builtin.set_fact:
    formatted_output: "{{ show_ospf_interface.stdout[0] | regex_replace('\r\n', '\n') }}"
  delegate_to: localhost
  ignore_errors: true
  when: show_ospf_interface["failed"] == false

- name: Save the output to the show_ospf_interfaces_file_path
  ansible.builtin.copy:
    content: "{{ formatted_output }}"
    dest: "{{ show_ospf_interfaces_file_path }}"
  delegate_to: localhost
  ignore_errors: true
  when: show_ospf_interface["failed"] == false

# 4.3 : Run python script to get the interface list
- name: Run python script to build interfaces list
  ansible.builtin.command:
    cmd: "python3 library/getInterfaces.py {{ show_interfaces_terse_file_path }} {{ interfaces_to_change_file_path }} {{ show_ospf_interfaces_file_path }} "
  register: interfaces

# 4.4 : Build a list of interfaces that will be iterated over
- name: Generate Lists from interfaces.txt files
  ansible.builtin.set_fact:
    interfaces_list: "{{ lookup('file', '{{ interfaces_to_change_file_path }}').splitlines() }}"
    # protocols_list: "{{ lookup('file', '{{ protocols_file }}').splitlines() }}"
  delegate_to: localhost

- name: Display lists
  ansible.builtin.debug:
    msg: 
      - "Interfaces List ; {{ interfaces_list }}"
  delegate_to: localhost
  ignore_errors: true

- name: Display commands to run
  ansible.builtin.debug:
    msg: 
      - "set interfaces {{ item }} disable"
  loop: "{{ interfaces_list }}"
  delegate_to: localhost
  ignore_errors: true

# 4.5 : Disable the southbound interfaces.
# - name: Disable the southbound interfaces
#   junipernetworks.junos.junos_command:       # is this the module to configure/change anything?
#     commands: disable {{ item }}             # Interfaces to be shut down
#   loop: "{{ interfaces_list }}"
#   when: 
#     - interfaces | length > 0
#     - isolation

# 4.6 : Send the text files to gitlab for refference and also use for traffic normalization.
- name: Clone the config backup git repository
  ansible.builtin.git:
    repo: "{{ git_repo_url }}"
    dest: "{{ tmp_root_dir }}/{{ git_repo_name }}"
    version: "{{ git_repo_branch }}"
    force: yes       # Still clone down and overwrite incase local repo is existing.
  # ignore_errors: true # You want this to fail if errors are there
  environment:
    GIT_SSL_NO_VERIFY: "true"
  run_once: true
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

# Enable git lfs by default
- name: Enable git lfs by default
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}/{{ git_repo_name }}
    git lfs track "*.bin"
    git lfs track "*.ucs"
    git lfs track "*.tgz" 
    git lfs pull 
  run_once: true
  ignore_errors: true
  delegate_to: localhost

- name: Ensure inventory_hostname dir is present - create if absent
  ansible.builtin.file:
    path: "{{ inventory_hostname_dir_path }}"
    state: directory
  ignore_errors: true
  delegate_to: localhost

- name: Copy the .txt files to local git repo
  ansible.builtin.shell: |
    cp {{ show_interfaces_terse_file_path }} {{ inventory_hostname_dir_path }}
    cp {{ show_ospf_interfaces_file_path }} {{ inventory_hostname_dir_path }}
    cp {{ interfaces_to_change_file_path }} {{ inventory_hostname_dir_path }}
  ignore_errors: true
  delegate_to: localhost
  when: isolation

- name: Copy the interfaces file to the /tmp/ for consumption by playbook
  ansible.builtin.shell: |
    cp {{ inventory_hostname_dir_path }}/interfaces-to-change.txt {{ interfaces_to_change_file_path }}
  delegate_to: localhost
  when: normalization

- name: Commit the changes and push to the remote repository
  ansible.builtin.shell: |
     cd {{ tmp_root_dir }}/{{ git_repo_name }}
     git config --global user.name {{ git_user }}
     git config --global user.email {{ git_user_email }}
     git add .
     git commit -m "file updates on $(date)"
     git push
  run_once: true
  environment:
    GIT_SSL_NO_VERIFY: "true"
  ignore_errors: true # You want the role to run end to end
  delegate_to: localhost
  when: isolation

# Might not need this since containers are ephemeral.
# But if testing or end up running the playbook more than once in the same container, this comes in handy
- name: Clean up files
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost
  when: isolation
