---
# git tasks
- name: Clone the config backup git repository to get the saved running config file
  ansible.builtin.git:
    repo: "https://{{ git_user }}:{{ git_token }}@{{ git_repo_path }}"
    dest: "{{ tmp_root_dir }}/{{ git_repo_name }}"
    version: "{{ git_repo_branch }}"
    force: yes       # Still clone down and overwrite incase local repo is existing.
  # ignore_errors: true # You want this to fail if errors are there
  environment:
    GIT_SSL_NO_VERIFY: "true"
  run_once: true
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

- name: Enable git lfs by default
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}/{{ git_repo_name }}
    git lfs track "*.bin"
    git lfs track "*.ucs"
    git lfs track "*.tgz" 
    git lfs pull 
  run_once: true
  ignore_errors: true
  delegate_to: localhost

- name: Ensure traffic-redirect dir is present - create if absent
  ansible.builtin.file:
    path: "{{ traffic_redirect_dir_path }}"
    state: directory
  ignore_errors: true
  delegate_to: localhost

# Collect southbound interfaces which are admin=up , link=up
- name: Collect current interfaces
  junipernetworks.junos.junos_command: 
    commands: show interfaces terse
  register: show_interfaces_terse

- name: Ensure the output is properly formatted
  ansible.builtin.set_fact:
    formatted_output: "{{ show_interfaces_terse.stdout[0] | regex_replace('\r\n', '\n') }}"
  delegate_to: localhost
  ignore_errors: true
  when: show_interfaces_terse["failed"] == false

- name: Save the output to the show_interface_terse_output_file
  ansible.builtin.copy:
    content: "{{ formatted_output }}"
    dest: "{{ show_interface_terse_output_file }}"
  delegate_to: localhost
  ignore_errors: true
  when: show_interfaces_terse["failed"] == false

# Call python script to build the 2 .cfg files
- name: Run python script to build interfaces list
  ansible.builtin.command:
    cmd: "python3 library/createConfigFiles.py {{ show_interface_terse_output_file }} {{ running_config_file }} {{ traffic_isolation_cfg_file }} {{ traffic_normalization_cfg_file }}"
  delegate_to: localhost

- name: Copy the 2 .cfg files into the local repository
  ansible.builtin.shell: |
    cp {{ traffic_isolation_cfg_file }} {{ traffic_redirect_dir_path }}
    cp {{ traffic_normalization_cfg_file }} {{ traffic_redirect_dir_path }}
  delegate_to: localhost

- name: Commit the changes and push to the remote repository
  ansible.builtin.shell: |
     cd {{ tmp_root_dir }}/{{ git_repo_name }}
     git config user.name {{ git_user }}
     git config user.email {{ git_email }}
     git config lfs.https://{{ git_user }}:{{ git_token }}@{{ git_repo_path }}.info/lfs.locksverify true
     git add .
     git commit -m "file updates on $(date)"
     git push https://{{ git_user }}:{{ git_token }}@{{ git_repo_path }}
  run_once: true
  ignore_errors: true # You want the role to run end to end
  delegate_to: localhost
  
